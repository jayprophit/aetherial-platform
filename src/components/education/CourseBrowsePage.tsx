import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { FiSearch, FiFilter, FiStar, FiChevronDown, FiChevronUp, FiExternalLink } from 'react-icons/fi';

// --- 1. TypeScript Interfaces and Types ---

/**
 * Defines the structure for a single course.
 * Incorporates Aetherial-specific fields like 'isBlockchainCertified' and 'aiRecommendedTags'.
 */
export interface Course {
  id: string;
  title: string;
  instructor: string;
  category: 'Development' | 'Design' | 'Business' | 'Marketing' | 'AI & Data Science' | 'Blockchain';
  price: number; // In USD equivalent
  tokenPrice: number; // Price in AETH (Aetherial Token)
  rating: number; // 0.0 to 5.0
  reviews: number;
  duration: string; // e.g., "10.5 hours"
  level: 'Beginner' | 'Intermediate' | 'Advanced' | 'All Levels';
  isBlockchainCertified: boolean; // Aetherial enhancement: Course completion certificate is an NFT/on-chain record
  aiRecommendedTags: string[]; // Aetherial enhancement: Tags generated by an AI model
  enrollmentCount: number;
  description: string;
}

/**
 * Defines the structure for the filtering state.
 */
interface CourseFilters {
  searchQuery: string;
  category: string | null;
  minRating: number;
  maxPrice: number;
  level: string | null;
  isCertified: boolean;
}

// --- 2. Sample Data (Simulating API Fetch) ---

const MOCK_COURSES: Course[] = [
  {
    id: 'c1',
    title: 'Advanced Solidity & Smart Contract Development',
    instructor: 'Dr. Crypto',
    category: 'Blockchain',
    price: 199.99,
    tokenPrice: 50,
    rating: 4.8,
    reviews: 1200,
    duration: '15 hours',
    level: 'Advanced',
    isBlockchainCertified: true,
    aiRecommendedTags: ['Solidity', 'Web3', 'DeFi', 'NFTs', 'Security'],
    enrollmentCount: 5500,
    description: 'Master the art of secure and scalable smart contract development on the Aetherial chain.'
  },
  {
    id: 'c2',
    title: 'React & TypeScript for Enterprise Applications',
    instructor: 'Jane Doe',
    category: 'Development',
    price: 129.99,
    tokenPrice: 35,
    rating: 4.6,
    reviews: 890,
    duration: '22 hours',
    level: 'Intermediate',
    isBlockchainCertified: false,
    aiRecommendedTags: ['React', 'TypeScript', 'Frontend', 'State Management'],
    enrollmentCount: 12000,
    description: 'Build robust and maintainable frontend applications using modern React patterns.'
  },
  {
    id: 'c3',
    title: 'AI-Powered Digital Marketing Strategy',
    instructor: 'Mark AI',
    category: 'Marketing',
    price: 99.99,
    tokenPrice: 25,
    rating: 4.9,
    reviews: 2100,
    duration: '8 hours',
    level: 'All Levels',
    isBlockchainCertified: true,
    aiRecommendedTags: ['AI', 'Marketing', 'SEO', 'Automation', 'Analytics'],
    enrollmentCount: 8000,
    description: 'Leverage the latest AI tools to optimize your digital marketing funnels and ROI.'
  },
  {
    id: 'c4',
    title: 'Introduction to UI/UX Design',
    instructor: 'Sarah Lee',
    category: 'Design',
    price: 49.99,
    tokenPrice: 12,
    rating: 4.4,
    reviews: 350,
    duration: '6 hours',
    level: 'Beginner',
    isBlockchainCertified: false,
    aiRecommendedTags: ['Figma', 'Sketch', 'User Research', 'Prototyping'],
    enrollmentCount: 3200,
    description: 'A beginner-friendly guide to the fundamentals of user interface and experience design.'
  },
  {
    id: 'c5',
    title: 'Decentralized Finance (DeFi) Explained',
    instructor: 'Alex Fin',
    category: 'Blockchain',
    price: 249.99,
    tokenPrice: 60,
    rating: 4.7,
    reviews: 950,
    duration: '18 hours',
    level: 'Advanced',
    isBlockchainCertified: true,
    aiRecommendedTags: ['DeFi', 'Yield Farming', 'Liquidity Pools', 'Tokens', 'Risk'],
    enrollmentCount: 4100,
    description: 'Dive deep into the world of DeFi, from basic concepts to advanced trading strategies.'
  },
];

const ALL_CATEGORIES = Array.from(new Set(MOCK_COURSES.map(c => c.category))).sort();
const ALL_LEVELS = Array.from(new Set(MOCK_COURSES.map(c => c.level))).sort();

// --- 3. Utility Components and Functions ---

/**
 * A simple component to render the star rating.
 */
const StarRating: React.FC<{ rating: number }> = ({ rating }) => {
  const fullStars = Math.floor(rating);
  const hasHalfStar = rating % 1 !== 0;
  const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

  return (
    <div className="flex items-center space-x-0.5 text-yellow-500">
      {Array(fullStars).fill(0).map((_, i) => <FiStar key={\`full-\${i}\`} className="w-4 h-4 fill-current" />)}
      {hasHalfStar && <div className="relative w-4 h-4"><FiStar className="w-4 h-4 fill-current opacity-30" /><div className="absolute top-0 left-0 overflow-hidden" style={{ width: '50%' }}><FiStar className="w-4 h-4 fill-current" /></div></div>}
      {Array(emptyStars).fill(0).map((_, i) => <FiStar key={\`empty-\${i}\`} className="w-4 h-4 text-gray-300" />)}
      <span className="ml-2 text-sm font-semibold text-gray-700">({rating.toFixed(1)})</span>
    </div>
  );
};

/**
 * Course Card Component
 */
const CourseCard: React.FC<{ course: Course }> = ({ course }) => {
  return (
    <div className="bg-white border border-gray-200 rounded-lg shadow-lg hover:shadow-xl transition duration-300 flex flex-col">
      <div className="p-4 flex-grow">
        <h3 className="text-xl font-bold text-gray-900 mb-2 truncate" title={course.title}>
          {course.title}
        </h3>
        <p className="text-sm text-indigo-600 font-medium mb-1">{course.category}</p>
        <p className="text-sm text-gray-500 mb-3">By {course.instructor}</p>
        
        <div className="flex items-center mb-3">
          <StarRating rating={course.rating} />
          <span className="ml-2 text-sm text-gray-500">({course.reviews} reviews)</span>
        </div>

        <p className="text-gray-700 text-sm mb-4 line-clamp-2">{course.description}</p>
        
        <div className="flex flex-wrap gap-2 mb-4">
          {course.aiRecommendedTags.slice(0, 3).map(tag => (
            <span key={tag} className="px-2 py-0.5 text-xs font-medium text-purple-700 bg-purple-100 rounded-full">
              {tag}
            </span>
          ))}
        </div>

        {/* Aetherial Enhancement: Blockchain Certification Status */}
        {course.isBlockchainCertified && (
          <div className="flex items-center text-xs font-semibold text-green-600 bg-green-50 p-2 rounded-md mb-3">
            <FiExternalLink className="w-3 h-3 mr-1" />
            Blockchain Certified (NFT)
          </div>
        )}

        <div className="flex justify-between items-center text-sm text-gray-600">
          <span>{course.duration}</span>
          <span className={\`px-3 py-1 rounded-full text-xs font-semibold \${
            course.level === 'Beginner' ? 'bg-blue-100 text-blue-800' :
            course.level === 'Intermediate' ? 'bg-yellow-100 text-yellow-800' :
            'bg-red-100 text-red-800'
          }\`}>
            {course.level}
          </span>
        </div>

      </div>
      <div className="p-4 border-t border-gray-100 mt-auto">
        <div className="flex justify-between items-center">
          <div className="text-lg font-extrabold text-gray-900">
            ${course.price.toFixed(2)}
          </div>
          {/* Aetherial Enhancement: Token Price */}
          <div className="text-sm font-medium text-purple-600 flex items-center">
            <span className="mr-1">{course.tokenPrice}</span> AETH
          </div>
        </div>
        <button className="mt-3 w-full bg-indigo-600 text-white py-2 rounded-lg font-semibold hover:bg-indigo-700 transition duration-150">
          Enroll Now
        </button>
      </div>
    </div>
  );
};

// --- 4. Main Component Logic and State Management ---

export const CourseBrowsePage: React.FC = () => {
  const [courses, setCourses] = useState<Course[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [filters, setFilters] = useState<CourseFilters>({
    searchQuery: '',
    category: null,
    minRating: 0,
    maxPrice: 300, // Default max price
    level: null,
    isCertified: false,
  });
  const [isFilterPanelOpen, setIsFilterPanelOpen] = useState(false);

  // Simulate fetching data on component mount
  useEffect(() => {
    // In a production app, this would be an API call (e.g., axios.get('/api/courses'))
    const fetchCourses = () => {
      setLoading(true);
      setTimeout(() => {
        setCourses(MOCK_COURSES);
        setLoading(false);
      }, 1000); // Simulate network delay
    };
    fetchCourses();
  }, []);

  /**
   * Handler for updating filter state.
   */
  const handleFilterChange = useCallback((key: keyof CourseFilters, value: any) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  }, []);

  /**
   * The core filtering logic. Memoized to prevent unnecessary re-calculation.
   */
  const filteredCourses = useMemo(() => {
    return courses.filter(course => {
      // 1. Search Query Filter (Title, Instructor, Description, AI Tags)
      const searchLower = filters.searchQuery.toLowerCase();
      const matchesSearch = 
        course.title.toLowerCase().includes(searchLower) ||
        course.instructor.toLowerCase().includes(searchLower) ||
        course.description.toLowerCase().includes(searchLower) ||
        course.aiRecommendedTags.some(tag => tag.toLowerCase().includes(searchLower));

      if (!matchesSearch) return false;

      // 2. Category Filter
      if (filters.category && course.category !== filters.category) return false;

      // 3. Rating Filter
      if (course.rating < filters.minRating) return false;

      // 4. Price Filter
      if (course.price > filters.maxPrice) return false;

      // 5. Level Filter
      if (filters.level && course.level !== filters.level) return false;

      // 6. Blockchain Certified Filter (Aetherial Enhancement)
      if (filters.isCertified && !course.isBlockchainCertified) return false;

      return true;
    });
  }, [courses, filters]);

  // --- 5. Rendering the Component (JSX) ---

  const renderFilterSection = (title: string, content: React.ReactNode) => (
    <div className="border-b border-gray-200 py-4">
      <h4 className="text-lg font-semibold text-gray-800 mb-3">{title}</h4>
      {content}
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50 p-4 sm:p-6 lg:p-8">
      <header className="mb-8">
        <h1 className="text-3xl font-extrabold text-gray-900">Aetherial Course Catalog</h1>
        <p className="text-gray-500">Explore thousands of courses, from AI to Blockchain development.</p>
      </header>

      {/* Search and Filter Toggle (Responsive) */}
      <div className="mb-6 flex flex-col md:flex-row gap-4">
        {/* Search Bar */}
        <div className="relative flex-grow">
          <FiSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
          <input
            type="text"
            placeholder="Search courses, instructors, or AI tags..."
            value={filters.searchQuery}
            onChange={(e) => handleFilterChange('searchQuery', e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 shadow-sm"
          />
        </div>
        
        {/* Filter Toggle for Mobile/Tablet */}
        <button
          onClick={() => setIsFilterPanelOpen(!isFilterPanelOpen)}
          className="md:hidden flex items-center justify-center px-4 py-2 border border-gray-300 rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition duration-150 shadow-sm"
        >
          <FiFilter className="w-5 h-5 mr-2" />
          Filters
          {isFilterPanelOpen ? <FiChevronUp className="ml-2" /> : <FiChevronDown className="ml-2" />}
        </button>
      </div>

      <div className="flex flex-col lg:flex-row gap-8">
        {/* Filter Panel (Sidebar) */}
        <aside className={\`lg:w-1/4 w-full bg-white p-6 rounded-xl shadow-lg border border-gray-200 \${isFilterPanelOpen ? 'block' : 'hidden'} md:block transition-all duration-300\`}>
          <h3 className="text-2xl font-bold text-gray-900 mb-4 flex items-center">
            <FiFilter className="w-6 h-6 mr-2 text-indigo-600" />
            Filter Options
          </h3>

          {/* Category Filter */}
          {renderFilterSection('Category', (
            <select
              value={filters.category || ''}
              onChange={(e) => handleFilterChange('category', e.target.value || null)}
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="">All Categories</option>
              {ALL_CATEGORIES.map(cat => (
                <option key={cat} value={cat}>{cat}</option>
              ))}
            </select>
          ))}

          {/* Level Filter */}
          {renderFilterSection('Level', (
            <div className="space-y-2">
              {ALL_LEVELS.map(lvl => (
                <label key={lvl} className="flex items-center text-gray-700">
                  <input
                    type="radio"
                    name="level"
                    value={lvl}
                    checked={filters.level === lvl}
                    onChange={() => handleFilterChange('level', lvl)}
                    className="form-radio h-4 w-4 text-indigo-600 transition duration-150 ease-in-out"
                  />
                  <span className="ml-2">{lvl}</span>
                </label>
              ))}
              <label className="flex items-center text-gray-700">
                <input
                  type="radio"
                  name="level"
                  value=""
                  checked={filters.level === null}
                  onChange={() => handleFilterChange('level', null)}
                  className="form-radio h-4 w-4 text-indigo-600 transition duration-150 ease-in-out"
                />
                <span className="ml-2 font-medium">Any Level</span>
              </label>
            </div>
          ))}

          {/* Rating Filter */}
          {renderFilterSection('Minimum Rating', (
            <div className="space-y-2">
              {[4.5, 4.0, 3.5, 0].map(rating => (
                <label key={rating} className="flex items-center text-gray-700">
                  <input
                    type="radio"
                    name="minRating"
                    checked={filters.minRating === rating}
                    onChange={() => handleFilterChange('minRating', rating)}
                    className="form-radio h-4 w-4 text-indigo-600 transition duration-150 ease-in-out"
                  />
                  <span className="ml-2 flex items-center">
                    {rating === 0 ? 'Any Rating' : <><StarRating rating={rating} /> & up</>}
                  </span>
                </label>
              ))}
            </div>
          ))}

          {/* Price Filter */}
          {renderFilterSection(\`Max Price: $\${filters.maxPrice}\`, (
            <>
              <input
                type="range"
                min="0"
                max="300"
                step="10"
                value={filters.maxPrice}
                onChange={(e) => handleFilterChange('maxPrice', Number(e.target.value))}
                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer range-lg"
              />
              <div className="flex justify-between text-sm text-gray-500 mt-1">
                <span>$0</span>
                <span>$300+</span>
              </div>
            </>
          ))}

          {/* Aetherial Enhancement: Blockchain Certified Toggle */}
          {renderFilterSection('Aetherial Enhancements', (
            <label className="flex items-center text-gray-800 font-medium cursor-pointer">
              <input
                type="checkbox"
                checked={filters.isCertified}
                onChange={(e) => handleFilterChange('isCertified', e.target.checked)}
                className="form-checkbox h-5 w-5 text-indigo-600 rounded"
              />
              <span className="ml-3">Blockchain Certified Courses (NFT)</span>
            </label>
          ))}
        </aside>

        {/* Course Results (Main Content) */}
        <main className="lg:w-3/4 w-full">
          {loading ? (
            <div className="text-center p-10 text-gray-600">Loading courses...</div>
          ) : (
            <>
              <div className="mb-6 flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-800">
                  {filteredCourses.length} {filteredCourses.length === 1 ? 'Course' : 'Courses'} Found
                </h2>
                {/* Simple Sort Dropdown (Placeholder for more complex sorting) */}
                <select className="p-2 border border-gray-300 rounded-lg text-sm">
                  <option>Sort by: Best Match</option>
                  <option>Sort by: Highest Rated</option>
                  <option>Sort by: Newest</option>
                  <option>Sort by: Price (Low to High)</option>
                </select>
              </div>

              {filteredCourses.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                  {filteredCourses.map(course => (
                    <CourseCard key={course.id} course={course} />
                  ))}
                </div>
              ) : (
                <div className="text-center p-20 bg-white rounded-xl shadow-lg border border-gray-200">
                  <FiSearch className="w-12 h-12 mx-auto text-gray-400 mb-4" />
                  <h3 className="text-xl font-semibold text-gray-800">No Courses Found</h3>
                  <p className="text-gray-500 mt-2">Try adjusting your filters or search query.</p>
                  <button
                    onClick={() => setFilters({ ...filters, searchQuery: '', category: null, minRating: 0, isCertified: false })}
                    className="mt-4 text-indigo-600 hover:text-indigo-800 font-medium"
                  >
                    Clear All Filters
                  </button>
                </div>
              )}
            </>
          )}
        </main>
      </div>
    </div>
  );
};

// --- 7. Export Default ---
// Assuming Tailwind CSS is configured in the project for styling.
export default CourseBrowsePage;

// --- Comments on Aetherial Unique Enhancements ---
// 1. Blockchain Certification (NFT):
//    - The \`isBlockchainCertified\` field in the \`Course\` interface and \`CourseCard\` display a badge.
//    - A filter option allows users to search specifically for these courses.
//    - This simulates a feature where course completion grants an NFT certificate or an on-chain record of achievement.
// 2. AI-Recommended Tags:
//    - The \`aiRecommendedTags\` field in the \`Course\` interface holds tags generated by an AI model (e.g., to improve searchability and relevance).
//    - These tags are displayed on the \`CourseCard\` and are included in the search logic.
// 3. DeFi/Token Integration:
//    - The \`tokenPrice\` field is included to show the price in the native AETH token, facilitating DeFi-like payment options.
//    - The \`CourseCard\` displays both USD and AETH prices.
// 4. Responsive Design:
//    - Uses a flex-based layout (\`flex-col lg:flex-row\`) for the main content.
//    - The filter panel is hidden on small screens (\`md:hidden\`) and controlled by a toggle button for a better mobile experience.
