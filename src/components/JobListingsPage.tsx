import React, { useState, useEffect, useMemo, useCallback } from 'react';

// --- 1. TypeScript Interfaces and Types ---

/**
 * Defines the structure for a single job listing.
 * Incorporates AETHERIAL unique enhancements:
 * - `blockchainContractId`: For secure, transparent contract management (DeFi/Blockchain).
 * - `aiJobScore`: A score generated by an AI matching engine for the user's profile.
 */
export interface JobListing {
  id: string;
  title: string;
  company: string;
  location: string;
  salaryMin: number;
  salaryMax: number;
  type: 'Full-Time' | 'Part-Time' | 'Contract' | 'Freelance';
  description: string;
  postedDate: string;
  isSaved: boolean;
  isApplied: boolean;
  blockchainContractId?: string;
  aiJobScore?: number; // 0 to 100
}

/**
 * Defines the structure for the current filter state.
 */
export interface JobFilters {
  searchTerm: string;
  location: string;
  jobType: 'All' | JobListing['type'];
  minSalary: number;
  maxSalary: number;
  showSavedOnly: boolean;
  showAppliedOnly: boolean;
}

// --- 2. Sample Data (Simulating API Fetch) ---

const initialJobData: JobListing[] = [
  {
    id: 'job-101',
    title: 'Senior Blockchain Developer',
    company: 'Aetherial Labs',
    location: 'Remote',
    salaryMin: 150000,
    salaryMax: 250000,
    type: 'Full-Time',
    description: 'Develop and maintain smart contracts for our DeFi platform.',
    postedDate: '2025-10-20',
    isSaved: true,
    isApplied: false,
    blockchainContractId: '0xDeFiContract123',
    aiJobScore: 92,
  },
  {
    id: 'job-102',
    title: 'AI/ML Engineer for Matching Engine',
    company: 'Synergy Tech',
    location: 'New York, NY',
    salaryMin: 120000,
    salaryMax: 180000,
    type: 'Full-Time',
    description: 'Build and optimize the AI-powered job matching algorithm.',
    postedDate: '2025-10-22',
    isSaved: false,
    isApplied: true,
    aiJobScore: 88,
  },
  {
    id: 'job-103',
    title: 'Technical Writer - Web3 Focus',
    company: 'CryptoDocs',
    location: 'Remote',
    salaryMin: 70000,
    salaryMax: 90000,
    type: 'Contract',
    description: 'Create documentation for decentralized applications.',
    postedDate: '2025-10-25',
    isSaved: false,
    isApplied: false,
    blockchainContractId: '0xContractWriter456',
    aiJobScore: 75,
  },
  {
    id: 'job-104',
    title: 'UX/UI Designer',
    company: 'Design Hub',
    location: 'San Francisco, CA',
    salaryMin: 90000,
    salaryMax: 130000,
    type: 'Full-Time',
    description: 'Design user-friendly interfaces for enterprise software.',
    postedDate: '2025-10-18',
    isSaved: true,
    isApplied: false,
    aiJobScore: 65,
  },
];

// --- 3. Utility Components (Simplified for this exercise) ---

// A simple component to display a job listing card
const JobCard: React.FC<{ job: JobListing; onToggleSave: (id: string) => void; onApply: (id: string) => void }> = ({ job, onToggleSave, onApply }) => {
  const saveButtonText = job.isSaved ? 'Unsave' : 'Save Job';
  const applyButtonText = job.isApplied ? 'Applied' : 'Apply Now';
  const applyButtonDisabled = job.isApplied;

  return (
    <div style={{ border: '1px solid #ccc', padding: '15px', marginBottom: '10px', borderRadius: '8px', boxShadow: job.aiJobScore && job.aiJobScore > 90 ? '0 0 10px rgba(0, 255, 0, 0.5)' : 'none' }}>
      <h3>{job.title}</h3>
      <p><strong>{job.company}</strong> - {job.location} ({job.type})</p>
      <p>Salary: ${job.salaryMin.toLocaleString()} - ${job.salaryMax.toLocaleString()}</p>
      {job.aiJobScore && <p style={{ color: job.aiJobScore > 80 ? 'green' : 'orange' }}>AI Match Score: {job.aiJobScore}% (AETHERIAL Enhancement)</p>}
      {job.blockchainContractId && <p style={{ fontSize: '0.8em', color: '#007bff' }}>Contract ID: {job.blockchainContractId} (Blockchain Secured)</p>}
      <p>{job.description.substring(0, 100)}...</p>
      <div style={{ display: 'flex', gap: '10px', marginTop: '10px' }}>
        <button onClick={() => onToggleSave(job.id)}>{saveButtonText}</button>
        <button onClick={() => onApply(job.id)} disabled={applyButtonDisabled}>{applyButtonText}</button>
      </div>
    </div>
  );
};

// --- 4. Main Component: JobListingsPage ---

/**
 * The main component for the Job Listings Page.
 * Manages state for job data, filters, and handles filtering logic.
 */
const JobListingsPage: React.FC = () => {
  // --- State Management ---
  const [jobs, setJobs] = useState<JobListing[]>(initialJobData);
  const [filters, setFilters] = useState<JobFilters>({
    searchTerm: '',
    location: '',
    jobType: 'All',
    minSalary: 0,
    maxSalary: 300000, // A reasonable high default
    showSavedOnly: false,
    showAppliedOnly: false,
  });

  // Simulate fetching data on mount (in a real app, this would be an API call)
  useEffect(() => {
    // For demonstration, we just use the initial data
    // In production: fetchJobs().then(data => setJobs(data));
  }, []);

  // --- Filter Handlers ---

  /**
   * Handles changes to text-based filters (search term, location).
   */
  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFilters(prevFilters => ({
      ...prevFilters,
      [name]: value,
    }));
  }, []);

  /**
   * Handles changes to number-based filters (salary).
   */
  const handleSalaryChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFilters(prevFilters => ({
      ...prevFilters,
      [name]: Number(value),
    }));
  }, []);

  /**
   * Handles changes to checkbox/toggle filters (saved, applied).
   */
  const handleToggleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target;
    setFilters(prevFilters => ({
      ...prevFilters,
      [name]: checked,
    }));
  }, []);

  /**
   * Resets all filters to their initial state.
   */
  const handleResetFilters = useCallback(() => {
    setFilters({
      searchTerm: '',
      location: '',
      jobType: 'All',
      minSalary: 0,
      maxSalary: 300000,
      showSavedOnly: false,
      showAppliedOnly: false,
    });
  }, []);

  // --- Interactive Job Handlers ---

  /**
   * Toggles the 'isSaved' status of a job.
   */
  const handleToggleSave = useCallback((id: string) => {
    setJobs(prevJobs =>
      prevJobs.map(job =>
        job.id === id ? { ...job, isSaved: !job.isSaved } : job
      )
    );
    console.log(`Job ${id} save status toggled.`);
  }, []);

  /**
   * Marks a job as 'isApplied'.
   */
  const handleApply = useCallback((id: string) => {
    setJobs(prevJobs =>
      prevJobs.map(job =>
        job.id === id ? { ...job, isApplied: true } : job
      )
    );
    // In a real application, this would trigger an application submission API call
    console.log(`Application submitted for job ${id}.`);
  }, []);

  // --- Filtering Logic (Memoized for performance) ---

  const filteredJobs = useMemo(() => {
    return jobs.filter(job => {
      const { searchTerm, location, jobType, minSalary, maxSalary, showSavedOnly, showAppliedOnly } = filters;

      // 1. Search Term Filter (Title or Company)
      const matchesSearch = searchTerm === '' ||
        job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        job.company.toLowerCase().includes(searchTerm.toLowerCase());

      // 2. Location Filter
      const matchesLocation = location === '' || job.location.toLowerCase().includes(location.toLowerCase());

      // 3. Job Type Filter
      const matchesType = jobType === 'All' || job.type === jobType;

      // 4. Salary Filter (Checks if the job's salary range overlaps with the filter range)
      const matchesSalary = job.salaryMax >= minSalary && job.salaryMin <= maxSalary;

      // 5. Saved Jobs Filter
      const matchesSaved = !showSavedOnly || job.isSaved;

      // 6. Applied Jobs Filter
      const matchesApplied = !showAppliedOnly || job.isApplied;

      return matchesSearch && matchesLocation && matchesType && matchesSalary && matchesSaved && matchesApplied;
    });
  }, [jobs, filters]);

  // --- Render UI (Simplified Styling for Component Structure) ---

  return (
    <div style={{ padding: '20px', maxWidth: '1200px', margin: '0 auto', fontFamily: 'Arial, sans-serif' }}>
      <h1>AETHERIAL Job Listings</h1>
      <p>Find your next opportunity, powered by AI matching and Blockchain contracts.</p>

      {/* Responsive Layout: Filter Sidebar and Job List */}
      <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
        {/* Filter Sidebar (Would be a separate component in a real app) */}
        <div style={{ padding: '15px', border: '1px solid #ddd', borderRadius: '8px', backgroundColor: '#f9f9f9', flexShrink: 0 }}>
          <h2>Filters</h2>
          <button onClick={handleResetFilters} style={{ marginBottom: '15px' }}>Reset Filters</button>

          {/* Search Bar */}
          <div style={{ marginBottom: '10px' }}>
            <label htmlFor="searchTerm">Keyword Search (Title, Company)</label>
            <input
              id="searchTerm"
              name="searchTerm"
              type="text"
              value={filters.searchTerm}
              onChange={handleFilterChange}
              placeholder="e.g., Blockchain, AI, Remote"
              style={{ width: '100%', padding: '8px', boxSizing: 'border-box' }}
            />
          </div>

          {/* Location Filter */}
          <div style={{ marginBottom: '10px' }}>
            <label htmlFor="location">Location</label>
            <input
              id="location"
              name="location"
              type="text"
              value={filters.location}
              onChange={handleFilterChange}
              placeholder="e.g., Remote, New York"
              style={{ width: '100%', padding: '8px', boxSizing: 'border-box' }}
            />
          </div>

          {/* Job Type Filter */}
          <div style={{ marginBottom: '10px' }}>
            <label htmlFor="jobType">Job Type</label>
            <select
              id="jobType"
              name="jobType"
              value={filters.jobType}
              onChange={handleFilterChange}
              style={{ width: '100%', padding: '8px', boxSizing: 'border-box' }}
            >
              <option value="All">All Types</option>
              <option value="Full-Time">Full-Time</option>
              <option value="Part-Time">Part-Time</option>
              <option value="Contract">Contract</option>
              <option value="Freelance">Freelance (BuddyBoss/Aetherial Contract)</option>
            </select>
          </div>

          {/* Salary Range Filter */}
          <div style={{ marginBottom: '10px' }}>
            <label>Salary Range (Min/Max)</label>
            <div style={{ display: 'flex', gap: '10px' }}>
              <input
                name="minSalary"
                type="number"
                value={filters.minSalary}
                onChange={handleSalaryChange}
                placeholder="Min Salary"
                style={{ width: '50%', padding: '8px' }}
              />
              <input
                name="maxSalary"
                type="number"
                value={filters.maxSalary}
                onChange={handleSalaryChange}
                placeholder="Max Salary"
                style={{ width: '50%', padding: '8px' }}
              />
            </div>
          </div>

          {/* Saved and Applied Toggles */}
          <div style={{ marginTop: '15px' }}>
            <label style={{ display: 'block', marginBottom: '5px' }}>
              <input
                type="checkbox"
                name="showSavedOnly"
                checked={filters.showSavedOnly}
                onChange={handleToggleChange}
              />
              {' '}Show Saved Jobs Only
            </label>
            <label style={{ display: 'block' }}>
              <input
                type="checkbox"
                name="showAppliedOnly"
                checked={filters.showAppliedOnly}
                onChange={handleToggleChange}
              />
              {' '}Show Applied Jobs Only
            </label>
          </div>
        </div>

        {/* Job List Area */}
        <div style={{ flexGrow: 1 }}>
          <h2>{filteredJobs.length} Job{filteredJobs.length !== 1 ? 's' : ''} Found</h2>
          {filteredJobs.length > 0 ? (
            filteredJobs.map(job => (
              <JobCard
                key={job.id}
                job={job}
                onToggleSave={handleToggleSave}
                onApply={handleApply}
              />
            ))
          ) : (
            <p>No jobs match your current filters. Try broadening your search!</p>
          )}
        </div>
      </div>

      {/* Responsive Design Consideration: The flex layout above will stack vertically on small screens */}
      <style>{`
        @media (min-width: 768px) {
          .job-listings-container {
            flex-direction: row;
          }
          .filter-sidebar {
            width: 300px;
          }
        }
      `}</style>
      <p style={{ marginTop: '20px', textAlign: 'center', fontSize: '0.9em', color: '#666' }}>
        Note: This component uses inline styles for simplicity. In a production environment, use a CSS-in-JS library, CSS modules, or a framework like Tailwind/Bootstrap for robust styling and responsiveness.
      </p>
    </div>
  );
};

export default JobListingsPage;