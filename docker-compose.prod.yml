version: '3.8'

services:
  # Frontend (Next.js)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.aetherial.io
      - NEXT_PUBLIC_WS_URL=wss://api.aetherial.io
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - aetherial-network

  # Backend (Node.js API)
  backend:
    build:
      context: ./src
      dockerfile: Dockerfile.prod
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://aetherial:${DB_PASSWORD}@postgres:5432/aetherial
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - BLOCKCHAIN_RPC_URL=${BLOCKCHAIN_RPC_URL}
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    networks:
      - aetherial-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=aetherial
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=aetherial
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - aetherial-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - aetherial-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - aetherial-network

volumes:
  postgres-data:
  redis-data:

networks:
  aetherial-network:
    driver: bridge

